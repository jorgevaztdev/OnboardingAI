// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent to answer employee questions about training content.
 *
 * - answerEmployeeQuestions - A function that handles the question answering process.
 * - AnswerEmployeeQuestionsInput - The input type for the answerEmployeeQuestions function.
 * - AnswerEmployeeQuestionsOutput - The return type for the answerEmployeeQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerEmployeeQuestionsInputSchema = z.object({
  question: z.string().describe('The question the employee is asking.'),
  trainingContent: z.string().describe('The relevant training content to answer the question.'),
});
export type AnswerEmployeeQuestionsInput = z.infer<typeof AnswerEmployeeQuestionsInputSchema>;

const AnswerEmployeeQuestionsOutputSchema = z.object({
  answer: z.string().describe('The answer to the employee question.'),
});
export type AnswerEmployeeQuestionsOutput = z.infer<typeof AnswerEmployeeQuestionsOutputSchema>;

export async function answerEmployeeQuestions(input: AnswerEmployeeQuestionsInput): Promise<AnswerEmployeeQuestionsOutput> {
  return answerEmployeeQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'answerEmployeeQuestionsPrompt',
  input: {schema: AnswerEmployeeQuestionsInputSchema},
  output: {schema: AnswerEmployeeQuestionsOutputSchema},
  prompt: `You are an AI chatbot that answers employee questions about training content.

  Use the following training content to answer the question.

  Training Content: {{{trainingContent}}}

  Question: {{{question}}}

  Answer:`,
});

const answerEmployeeQuestionsFlow = ai.defineFlow(
  {
    name: 'answerEmployeeQuestionsFlow',
    inputSchema: AnswerEmployeeQuestionsInputSchema,
    outputSchema: AnswerEmployeeQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
